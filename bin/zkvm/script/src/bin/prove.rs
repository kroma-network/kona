//! An end-to-end example of using the SP1 SDK to generate a proof of a program that can be verified
//! on-chain.
//!
//! You can run this script using the following command:
//! ```shell
//! RUST_LOG=info cargo run --package fibonacci-script --bin prove --release
//! ```

use alloy_primitives::B256;
use alloy_sol_types::{sol, SolValue};
use anyhow::Result;
use clap::{ArgEnum, Parser};
use kona_preimage::PreimageKey;
use revm::primitives::HashMap;
use serde::{Deserialize, Serialize};
use sp1_sdk::{HashableKey, ProverClient, SP1ProofWithPublicValues, SP1Stdin, SP1VerifyingKey};
use std::{fs::File, io::BufReader, path::PathBuf};

/// The ELF (executable and linkable format) file for the Succinct RISC-V zkVM.
///
/// This file is generated by running `cargo prove build` inside the `program` directory.
pub const EVM_ELF: &[u8] = include_bytes!("../../../program/elf/riscv32im-succinct-zkvm-elf");

#[derive(ArgEnum, Debug, Clone, PartialEq)]
#[clap(rename_all = "kebab-case")]
enum Method {
    /// Generate a proof by a single machine prover
    Single,
}

/// The arguments for the prove command.
#[derive(Parser, Debug)]
#[clap(author, version, about, long_about = None)]
struct MainArgs {
    #[clap(short, long, arg_enum, default_value = "single")]
    method: Method,

    #[clap(short, long, default_value = "../../preimages/")]
    preimages_dir: PathBuf,

    #[clap(long)]
    target_l2_height: u32,

    #[clap(long)]
    l1_end_height: u32,

    #[clap(long, default_value = "true")]
    evm: bool,
}

impl MainArgs {
    pub fn get_preimages(&self) -> HashMap<PreimageKey, Vec<u8>> {
        let json_file_name = format!(
            "{}/{}_preimages.json",
            self.preimages_dir.to_str().unwrap(),
            self.target_l2_height
        );
        let json_file = File::open(json_file_name).unwrap();
        let reader = BufReader::new(json_file);
        let parsed: HashMap<B256, Vec<u8>> = serde_json::from_reader(reader).unwrap();
        parsed.into_iter().map(|(k, v)| (PreimageKey::try_from(*k).ok().unwrap(), v)).collect()
    }
}

/// The public values encoded as a tuple that can be easily deserialized inside Solidity.
type PublicValuesTuple = sol! {
    tuple(B256, B256, B256)
};

#[tokio::main]
async fn main() -> Result<()> {
    // Setup the logger.
    sp1_sdk::utils::setup_logger();

    // Parse the command line arguments.
    let main_args = MainArgs::parse();

    // Setup the prover client.
    let client = ProverClient::new();

    // Setup the program.
    let (pk, vk) = client.setup(EVM_ELF);

    let json_file_name = format!("../../preimages/{}_preimages.json", main_args.target_l2_height);
    let json_file = File::open(json_file_name).unwrap();
    let reader = BufReader::new(json_file);
    let parsed: HashMap<B256, Vec<u8>> = serde_json::from_reader(reader).unwrap();
    let prebuilt_preimage: HashMap<PreimageKey, Vec<u8>> =
        parsed.into_iter().map(|(k, v)| (PreimageKey::try_from(*k).ok().unwrap(), v)).collect();

    // Setup the inputs.
    let mut stdin = SP1Stdin::new();
    stdin.write(&prebuilt_preimage);

    if main_args.evm {
        // Generate the proof.
        let proof = client.prove(&pk, stdin).plonk().run().unwrap();
        create_plonk_fixture(&proof, &vk);
    } else {
        // Generate the proof.
        let proof = client.prove(&pk, stdin).run().expect("failed to generate proof");
        proof.save("proof-with-pis.json").expect("failed to save proof");
        // let (_, _, fib_n) =
        //     PublicValuesTuple::abi_decode(proof.public_values.as_slice(), false).unwrap();
        println!("Successfully generated proof!");
        // println!("fib(n): {}", fib_n);

        // Verify the proof.
        client.verify(&proof, &vk).expect("failed to verify proof");
    }
    Ok(())
}

/// A fixture that can be used to test the verification of SP1 zkVM proofs inside Solidity.
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
struct SP1ProofFixture {
    parent_output_root: B256,
    output_root: B256,
    l1_end_block_hash: B256,
    vkey: String,
    public_values: String,
    proof: String,
}

/// Create a fixture for the given proof.
fn create_plonk_fixture(proof: &SP1ProofWithPublicValues, vk: &SP1VerifyingKey) {
    // Deserialize the public values.
    let bytes = proof.public_values.as_slice();
    let (parent_output_root, output_root, l1_end_block_hash) =
        PublicValuesTuple::abi_decode(bytes, false).unwrap();

    // Create the testing fixture so we can test things end-ot-end.
    let fixture = SP1ProofFixture {
        parent_output_root,
        output_root,
        l1_end_block_hash,
        vkey: vk.bytes32().to_string(),
        public_values: format!("0x{}", hex::encode(bytes)),
        proof: format!("0x{}", hex::encode(proof.bytes())),
    };

    // The verification key is used to verify that the proof corresponds to the execution of the
    // program on the given input.
    //
    // Note that the verification key stays the same regardless of the input.
    println!("Verification Key: {}", fixture.vkey);

    // The public values are the values whicha are publically commited to by the zkVM.
    //
    // If you need to expose the inputs or outputs of your program, you should commit them in
    // the public values.
    println!("Public Values: {}", fixture.public_values);

    // The proof proves to the verifier that the program was executed with some inputs that led to
    // the give public values.
    println!("Proof Bytes: {}", fixture.proof);

    // Save the fixture to a file.
    let fixture_path = PathBuf::from(env!("CARGO_MANIFEST_DIR")).join("../contracts/src/fixtures");
    std::fs::create_dir_all(&fixture_path).expect("failed to create fixture path");
    std::fs::write(
        fixture_path.join("fixture.json"),
        serde_json::to_string_pretty(&fixture).unwrap(),
    )
    .expect("failed to write fixture");
}
